// -------------------------------------------------------------------------------------------------
// 2019-05-22  Интерфейс работы с картинками (используется в полях диалога при работе в EW-режиме)

#ifndef _RSIMAGE_H_
#define _RSIMAGE_H_

#include <stdio.h>
#include <list>

#include "pexpdef.h"
#include "rstypes.h"
#include "bedit.h"
#include "bdate.h"
#include "menu.h"

#include "rsl/common.h"
#include "rsl/stdobj.h"


// -----------------------------------------------------------------------------
// Граничные значения для параметров

// Параметр MAXPICTURESIZE
#define dRSIMAGE_MAXSIZE_MIN        1
#define dRSIMAGE_MAXSIZE_MAX     3000
#define dRSIMAGE_MAXSIZE_DEF      500

// Параметр MAXPICTURECOUNT
#define dRSIMAGE_MAXCOUNT_MIN       1
#define dRSIMAGE_MAXCOUNT_MAX      50
#define dRSIMAGE_MAXCOUNT_DEF      10

// Параметр EXTERNALPICTUREMODE
#define dRSIMAGE_EXTMODE_ND         1   // Не удалять временный файл (No Delete)
#define dRSIMAGE_EXTMODE_UAP        2   // Использовать абсолютный путь к файлу с картинкой (Use Abs Path)
#define dRSIMAGE_EXTMODE_DTTM       4   // Добавлять в имя временного файла текущие дату/время


// -----------------------------------------------------------------------------
// Команды контекстного меню (и не только) поля с картинкой
#define  dCMD_IMAGE_PREV          200   // Предыдущее изображение в списке
#define  dCMD_IMAGE_NEXT          201   // Следующее изображение в списке
#define  dCMD_IMAGE_FIRST         202   // Первое изображение в списке
#define  dCMD_IMAGE_LAST          203   // Последнее изображение в списке

#define  dCMD_IMAGE_PREVFRAME     204   // Предыдущий кадр в картинке
#define  dCMD_IMAGE_NEXTFRAME     205   // Следующий кадр в картинке

#define  dCMD_IMAGE_ADD           210   // Добавить изображение
#define  dCMD_IMAGE_UPDATE        211   // Заменить изображение
#define  dCMD_IMAGE_REMOVE        212   // Удалить изображение

#define  dCMD_IMAGE_PASTE         213   // Вставка картинки из буфера обмена

#define  dCMD_IMAGE_SAVEAS        220   // Сохранить изображение как

#define  dCMD_IMAGE_INFO          230   // Показать информацию об изображении

#define  dCMD_IMAGE_INIT_TT       240   // Начальная установка всплывающей подсказки для списка изображений

#define  dCMD_IMAGE_EXTVIEWER     250   // Просмотр изображения с помощью внешней программы
#define  dCMD_IMAGE_VIEWER        251   // Просмотр изображения в отдельном окне


// -----------------------------------------------------------------------------
// Идентификаторы классов
#define  dCLASSID_IMAGE           100
#define  dCLASSID_IMAGELIST       200
#define  dCLASSID_IMAGEBASE       300

// -----------------------------------------------------------------------------
// Номер версии по-умолчанию
#define  dRSIMAGE_VERSION           1   // Для CRSImage
#define  dRSIMAGELIST_VERSION       1   // Для CRSImageList


#include <packpsh1.h>

// -----------------------------------------------------------------------------
// Общий заголовок (для определения типа объекта)
typedef struct
      {
       db_int32   version;    // Версия блока (пока 1)
       db_int16   classid;    // Идентификатор класса объекта
       db_int16   offset;     // Смещение (от начала блока) до начала содержимого
      } TSImageBaseHeader;

// -----------------------------------------------------------------------------
// Данные файла
typedef struct
      {
       TSImageBaseHeader  h;  // Общая часть заголовка

       db_int32   size;       // Размер файла (байт)
       char       name[_MAX_PATH];  // Название файла
       bdate      cdate;      // Дата создания файла
       btime      ctime;      // Время создания файла
       bdate      mdate;      // Дата последней модификации
       btime      mtime;      // Время последней модификации
       bdate      ldate;      // Дата загрузки
       btime      ltime;      // Время загрузки

       db_uint32  crc32;      // Контрольная сумма файла
      } TSImageHeader;

// -----------------------------------------------------------------------------
// Данные списка
typedef struct
      {
       TSImageBaseHeader  h;  // Общая часть заголовка

       db_int16   count;      // Количество объектов в списке
       db_int16   curpos;     // Номер текущего объекта
       db_int32   size;       // Размер данных элеиентов списка (байт)
      } TSImageListHeader;

#include <packpop.h>


// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Базовый класс (для типизации)
class _RSPNLEXP CRSImageBase
    {
     private:
       int   m_pv_Version,    // Версия объекта
             m_pv_Type;       // Тип объекта
       bool  m_pv_Changed,    // Признак изменения объекта
             m_pv_RO;         // Признак "Только для чтения"
       int   m_pv_Size;       // Размер данных (в качестве флага)


     protected:
       int mRestoreFromBLOB(BTRVFILE *bf, bool flagAsStream = false, bool flagReadSize = false);

     public:
       // ----------------------------------------
       CRSImageBase(int ver = dRSIMAGE_VERSION, int type = dCLASSID_IMAGEBASE);

       virtual ~CRSImageBase();

       // ----------------------------------------
       // Получить версию объекта
       int GetVersion(void) const;

       // ----------------------------------------
       // Установить версию объекта
       int SetVersion(int ver);

       // ----------------------------------------
       // Получить идентификатор класса
       int GetClassID(void) const;

       // ----------------------------------------
       // Установить идентификатор класса
       void SetClassID(int type = dCLASSID_IMAGEBASE);

       // ----------------------------------------
       // Получить признак изменения объекта
       bool IsChanged(void) const;

       // ----------------------------------------
       // Установить признак изменения объекта
       void SetChanged(bool flag);

       // ----------------------------------------
       // Получить признак "Только для чтения"
       bool IsRO(void) const;

       // ----------------------------------------
       // Установить признак "Только для чтения"
       void SetRO(bool flag);

       // ----------------------------------------
       // "Интерфейсы"
       // ----------------------------------------

       // ----------------------------------------
       // Очистка объекта
       virtual void Clear(bool flDataOnly = false);

       // ----------------------------------------
       // Сохранить объект в BLOB'е dbt-файла
       virtual int  StoreBF(BTRVFILE *bf, bool flagAsStream = false);

       // ----------------------------------------
       // Восстановить объект из BLOB'а dbt-файла
       // [in] flagAsStream - считать данные в формате TStream
       virtual int  RestoreBF(BTRVFILE *bf, bool flagAsStream = false);

       // ----------------------------------------
       // Сохранить объект в буфере
       virtual int  Store(void *ptr, bool flDataOnly = false);

       // ----------------------------------------
       // Восстановить объект из буфера с контролем размера
       // [in] sizePtr - размер блока ptr
       virtual int  Restore(const void *ptr, int sizePtr);

       // ----------------------------------------
       // Возвращает число байт, необходимое для сохранения объектов
       // Если параметр flDataOnly установлен в значение true, будет подсчитан только
       // общий размер изображений в списке
       virtual int  Size(bool flDataOnly = false) const;
    };


// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Класс-обертка для одного изображения
class _RSPNLEXP CRSImage : public CRSImageBase
    {
     private:
       int            m_pv_ImageSize;            // Размер картинки

       mutable void  *m_pv_ImageData;            // Буфер данных картинки

       char           m_pv_FileName[_MAX_PATH];  // Имя файла

       btimestamp     m_pv_CreateDT,             // Дата и время создания файла
                      m_pv_ModifyDT,             // Дата и время модификации файла
                      m_pv_LoadDT;               // Дата и время загрузки файла

       uint32         m_pv_crc32;                // Контрольная сумма данных

       bool           m_pv_IsOwner;              // Объект создан динамически или на стеке (нужно для CRSImageList)

     protected:
       // ----------------------------------------
       void mInit(bool fromConstr = false);

       // ----------------------------------------
       int mRestore(const void *ptr, int sizePtr, bool flDataOnly, int *readSize);

     public:
       // ----------------------------------------
       // Конструктор с версией и загрузкой файла
       CRSImage(int ver = dRSIMAGE_VERSION, const char *name = NULL);

       // ----------------------------------------
       // Конструктор с загрузкой файла (версия используется текущая)
       CRSImage(const char *name);

       // ----------------------------------------
       // Аналог конструктора копирования через указатель
       CRSImage(const CRSImage &obj, bool flDataOnly);

       // ----------------------------------------
       // Конструктор копирования
       CRSImage(const CRSImage &obj);

       // ----------------------------------------
       // Деструктор
      ~CRSImage();

       // ----------------------------------------
       // Оператор присваивания (нужно для списка)
       CRSImage &operator = (CRSImage &rObj);

       // ----------------------------------------
       // Получить признак создания объекта
       bool IsOwner(void);

       // ----------------------------------------
       // Установить признак создания объекта
       void SetIsOwner(bool isOwner);

       // ----------------------------------------
       // Загрузить изображение из файла
       int Load(const char *name);

       // ----------------------------------------
       // Загрузить изображение из памяти
       int Load(size_t size, void *data);

       // ----------------------------------------
       // Получить размер файла () в байтах. В случае ошибки возвращает 0.
       // Ограничение на размер - не более 2 Гб
       int FileSize(const char *name);

       // ----------------------------------------
       // Сохранить изображение в файл (с текущим именем), либо под
       // другим именев (если задан параметр name).
       int Save(const char *name = NULL);

       // ----------------------------------------
       // Сохранить объект в буфере. Необходимый размер буфера можно узнать
       // с помощью метода Size().
       // Если параметр flDataOnly установлен в значение true, будут сохранены
       // только бинарные данные изображения.
       int Store(void *ptr, bool flDataOnly = false);

       // ----------------------------------------
       // Сохранить объект в BLOB'е текущей записи dbt-файла. Необходимый размер буфера
       // можно узнать с помощью метода Size().
       // [in] flagAsStream - записать данные в формате TStream
       int StoreBF(BTRVFILE *bf, bool flagAsStream = false);

       // ----------------------------------------
       // Восстановить объект из буфера. Перед восстановлением объекта его текущее
       // содержимое удаляется!
       // Если параметр flDataOnly равен true, будет восстановлен только буфер изображения.
       // Все остальные данные остануться прежними.
       // Параметр readSize возвращает полный размер объекта (байт)
       int Restore(const void *ptr, bool flDataOnly = false, int *readSize = NULL);

       // ----------------------------------------
       // Восстановить объект из буфера с контролем размера
       // [in] sizePtr - размер блока ptr
       int Restore(const void *ptr, int sizePtr);

       // ----------------------------------------
       // Восстановить объект из BLOB'а текущей записи dbt-файла. Перед восстановлением объекта
       // его текущее содержимое удаляется!
       // [in] flagAsStream - считать данные в формате TStream
       int RestoreBF(BTRVFILE *bf, bool flagAsStream = false);

       // ----------------------------------------
       // Возвращает количество кадров в изображении (TIFF и т.п.)
       // Пока не работает (возвращает 0 или 1, в зависимости от наличия картинки).
       int  Count(void) const;

       // ----------------------------------------
       // Возвращает число байт, необходимое для сохранения объекта.
       // Если параметр flDataOnly равен true, возвращает только размер картинки.
       int  Size(bool flDataOnly = false) const;

       // ----------------------------------------
       // Установить объект (старый будет удален).
       // Если параметр flDataOnly равен true, будет изменен только буфер изображения.
       // Все остальные данные остануться прежними.
       bool Set(const CRSImage &obj, bool flDataOnly = false);

       // ----------------------------------------
       // Возвращает указатель на буфер памяти с содержимым изображения.
       // Размер буфера можно узнать с помощью функции Size(true).
       void *GetData(void) const;

       // ----------------------------------------
       // Получить контрольную сумму
       uint32 GetCRC32(void) const;

       // ----------------------------------------
       // Вычислить контрольную сумму
       // [in] flagUpdate - если равен true, происходит обновление m_pv_crc32.
       //                   Иначе - только вычисление.
       uint32 CalcCRC32(bool flagUpdate = true);

       // ----------------------------------------
       // Получить дату и время создания файла
       void GetCreateDT(btimestamp *dt) const;

       // ----------------------------------------
       // Получить дату и время модификации файла
       void GetModifyDT(btimestamp *dt) const;

       // ----------------------------------------
       // Получить дату и время загрузки файла
       void GetLoadDT(btimestamp *dt) const;

       // ----------------------------------------
       // Получить имя файла
       void GetName(char *name) const;

       // ----------------------------------------
       // Очистить объект
       // Если параметр flDataOnly равен true, будут удален только буфер изображения.
       void Clear(bool flDataOnly = false);
    };


// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Интерфейсный класс для списка изображений (используется в FIELD::FValue)
class _RSPNLEXP CRSImageList : public CRSImageBase
    {
       typedef std::list<CRSImage *>            TLImageList;
       typedef std::list<CRSImage *>::iterator  TIImageList;

     private:
       int          m_pv_Pos;        // Позиция текущего элемента
       TIImageList  m_pv_Curr;       // Текущий объект

       CRSImage    *m_pv_Tmp;        // Указатель на временный объект
                                     // Используется в ситуации, когда список пуст (а в ewextt всё равно
                                     // нужно что-то передать).

       TLImageList  m_pv_ImageList;  // Список изображений


     protected:
       // ----------------------------------------
       void mInit(bool fromConstr = false);

       // ----------------------------------------
       bool mSetPos(int pos);

       // ----------------------------------------
       TIImageList mCheckPos(int pos);

       // ----------------------------------------
       bool mCreateTmp(void);

       // ----------------------------------------
       void mDeleteTmp(void);

     public:
       // ----------------------------------------
       // Конструктор с заданием версии списка
       CRSImageList(int ver = dRSIMAGELIST_VERSION);

       // ----------------------------------------
       // Деструктор
      ~CRSImageList();

       // ----------------------------------------
       // Сохранить список в буфере. Необходимый размер буфера можно узнать
       // с помощью метода Size(-1).
       // Параметр flDataOnly используется только для совместимости с базовым классом !
       int Store(void *ptr, bool flDataOnly = false);

       // ----------------------------------------
       // Сохранить список в BLOB текущей записи. Необходимый размер буфера можно узнать
       // с помощью метода Size(-1).
       // [in] flagAsStream - записать данные в формате TStream
       int StoreBF(BTRVFILE *bf, bool flagAsStream = false);

       // ----------------------------------------
       // Восстановить список из буфера. Перед восстановлением списка его текущее
       // содержимое удаляется!
       int Restore(const void *ptr);

       // ----------------------------------------
       // Восстановить объект из буфера с контролем размера
       // [in] sizePtr - размер блока ptr
       int Restore(const void *ptr, int sizePtr);

       // ----------------------------------------
       // Восстановить список из BLOB текущей записи. Перед восстановлением списка его текущее
       // содержимое удаляется!
       // [in] flagAsStream - считать данные в формате TStream
       int RestoreBF(BTRVFILE *bf, bool flagAsStream = false);

       // ----------------------------------------
       // Возвращает количество объектов в списке
       int  Count(void);

       // ----------------------------------------
       // Возвращает число байт, необходимое для сохранения объекта (или всех объектов)
       // Если параметр flDataOnly установлен в значение true, будет подсчитан только
       // общий размер изображений в списке
       int  Size(int pos, bool flDataOnly = false);

       // ----------------------------------------
       // Возвращает число байт, необходимое для сохранения всех объектов
       // Если параметр flDataOnly установлен в значение true, будет подсчитан только
       // общий размер изображений в списке
       int  Size(bool flDataOnly = false) const;

       // ----------------------------------------
       // Возвращает текущий объект, или объект по заданному индексу
       // Если требуемый объект отсутствует, возвращает NULL.
       CRSImage *Get(int pos = -1);

       // ----------------------------------------
       // Получить временный объект
       // Если требуемый объект отсутствует, возвращает NULL.
       CRSImage *GetTmp(void);

       // ----------------------------------------
       // Возвращает (устанавливает) текущую позицию
       int Pos(int pos = -1);

       // ----------------------------------------
       // Спозиционироваться на первый элемент списка
       // Если требуемый объект отсутствует, возвращает NULL.
       CRSImage *First(void);

       // ----------------------------------------
       // Спозиционироваться на последний элемент списка
       // Если требуемый объект отсутствует, возвращает NULL.
       CRSImage *Last(void);

       // ----------------------------------------
       // Спозиционироваться на следующий элемент списка
       // Если требуемый объект отсутствует, возвращает NULL.
       CRSImage *Next(void);

       // ----------------------------------------
       // Спозиционироваться на предыдущий элемент списка
       // Если требуемый объект отсутствует, возвращает NULL.
       CRSImage *Prev(void);

       // ----------------------------------------
       // Добавить новый элемент в конец списка
       bool Add(CRSImage *obj, bool isOwner = true);

       // ----------------------------------------
       // Добавить новый элемент в конец списка
       bool Add(const char *name);

       // ----------------------------------------
       // Вставить новый элемент перед заданным (если before = 0, новый элемент
       // будет добавлен в начало списка)
       bool Insert(CRSImage *obj, bool isOwner = true, int before = 0);

       // ----------------------------------------
       // Обновить текущий элемент (или элемент в заданной позиции)
       bool Update(CRSImage *obj, int pos = -1);

       // ----------------------------------------
       // Удалить текущий элемент (или элемент в заданной позиции)
       bool Delete(int pos = -1);

       // ----------------------------------------
       // Очистить весь список
       // Если параметр flDataOnly установлен в значение true, будут удалены
       // только данные изображений
       void Clear(bool flDataOnly = false);

       // ----------------------------------------
       // Сбросить признак изменения объекта (списка)
       void ClearChanged(void);
    };

#ifdef __cplusplus
 extern "C" {
#endif

// -----------------------------------------------------------------------------
// Обработчик поля PICTURE
int RSPictureHandler(PANEL *fld, int cf, int cmd);

// -----------------------------------------------------------------------------
// Регистрация классов TImage и TImageList для работы в RSL
void RSImageTable(void);

// -----------------------------------------------------------------------------
// Создание RSL-ного объекта для CRSImage
_TOOLEXP TGenObject *RSImageCreateTImage(CRSImage *obj = NULL);

// -----------------------------------------------------------------------------
// Создание RSL-ного объекта для CRSImageList
_TOOLEXP TGenObject *RSImageCreateTImageList(CRSImageList *obj = NULL);

// -----------------------------------------------------------------------------
// Обобщенная функция создание RSL-ного объекта для CRSImage/CRSImageList
_TOOLEXP TGenObject *RSImageCreateTImageBase(CRSImageBase *obj);

// -----------------------------------------------------------------------------
// Получение С-шного объекта для TImage
_TOOLEXP CRSImage *RSImageGetTImage(TGenObject *obj);

// -----------------------------------------------------------------------------
// Создание C-шного объекта для TImageList
_TOOLEXP CRSImageList *RSImageGetTImageList(TGenObject *obj);

// -----------------------------------------------------------------------------
// Обобщенная функция получения С-шного объекта для TImage/TImageList
_TOOLEXP CRSImageBase *RSImageGetTImageBase(TGenObject *obj);

// -----------------------------------------------------------------------------
// Установка предельного размера картинки (кб) (параметр MAXPICTURESIZE)
// Возвращает предыдущее значение
_TOOLEXP int RSImageSetImageSize(int val);

// -----------------------------------------------------------------------------
// Установка максимального размера списка (параметр MAXPICTURECOUNT)
// Возвращает предыдущее значение
_TOOLEXP int RSImageSetImageCount(int val);

// -----------------------------------------------------------------------------
// Установка программы для внешнего просмотра (параметр EXTERNALPICTUREVIEWER)
_TOOLEXP void RSImageSetExternalViewer(const char *prog);

// -----------------------------------------------------------------------------
// Установка режимов для программы внешнего просмотра (параметр EXTERNALPICTUREMODE)
// В качестве val может быть задана комбинация флагов dRSIMAGE_EXTMODE_*
// Возвращает предыдущее значение
_TOOLEXP int RSImageSetExternalMode(int val);


// -----------------------------------------------------------------------------
// Просмотровщик графических файлов (по имени файла)
_TOOLEXP int RSImageViewerF(const char *fname, const char *title = NULL);

// -----------------------------------------------------------------------------
// Просмотровщик графических файлов (по объекту CRSImage)
_TOOLEXP int RSImageViewerO(CRSImage *obj, const char *title = NULL);

#ifdef __cplusplus
 };
#endif

#endif _RSIMAGE_H_

/* <-- EOF --> */